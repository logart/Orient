<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved. ~ ~ Licensed under the Apache License, Version 2.0 (the "License"); ~ you may not 
	use this file except in compliance with the License. ~ You may obtain a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 ~ ~ Unless 
	required by applicable law or agreed to in writing, software ~ distributed under the License is distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES OR 
	CONDITIONS OF ANY KIND, either express or implied. ~ See the License for the specific language governing permissions and ~ limitations under the License. -->

<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-2.1.xsd" xmlns="http://www.hazelcast.com/schema/config"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<group>
		<name>orientdb</name>
		<password>orientdb</password>
	</group>
	<network>
		<port auto-increment="true">2434</port>
		<join>
			<multicast enabled="true">
				<multicast-group>235.1.1.1</multicast-group>
				<multicast-port>2434</multicast-port>
			</multicast>
		</join>
	</network>
	<executor-service>
		<core-pool-size>4</core-pool-size>
		<max-pool-size>64</max-pool-size>
		<keep-alive-seconds>60</keep-alive-seconds>
	</executor-service>
	<map name="default">
		<!-- Number of backups. If 1 is set as the backup-count for example, then all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>

		<!-- Maximum number of seconds for each entry to stay in the map. Entries that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>

		<!-- Maximum number of seconds for each entry to stay idle in the map. Entries that are idle (not touched) for more than <max-idle-seconds> will get 
			automatically evicted from the map. Entry is touched if get, put or containsKey is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>

		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU (Least Frequently Used). NONE is the default. -->
		<eviction-policy>LRU</eviction-policy>

		<!-- Maximum size of the map. When max size is reached, map is evicted based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 0 means 
			Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="used_heap_size">100</max-size>

		<!-- When max. size is reached, specified percentage of the map will be evicted. Any integer between 0 and 100. If 25 is set for example, 25% of the 
			entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved by the policy set here. Default policy is hz.ADD_NEW_ENTRY. There are built-in 
			merge policies such as hz.NO_MERGE: no entry will merge. hz.ADD_NEW_ENTRY: entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>com.nuvolabase.orientdb.server.cluster.hazelcast.OHazelcastMapStore</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>
	<!-- Add your own semaphore configurations here: <semaphore name="default"> <initial-permits>10</initial-permits> <semaphore-factory enabled="true"> <class-name>com.acme.MySemaphoreFactory</class-name> 
		</semaphore-factory> </semaphore> -->

	<!-- Add your own map merge policy implementations here: <merge-policies> <map-merge-policy name="MY_MERGE_POLICY"> <class-name>com.acme.MyOwnMergePolicy</class-name> 
		</map-merge-policy> </merge-policies> -->

</hazelcast>